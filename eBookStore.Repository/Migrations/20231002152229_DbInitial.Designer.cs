// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eBookStore.Repository.Context;

#nullable disable

namespace eBookStore.Repository.Migrations
{
    [DbContext(typeof(EBookStoreDbContext))]
    [Migration("20231002152229_DbInitial")]
    partial class DbInitial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("eBookStore.Repository.Entity.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("Author");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            Address = "Thu Duc District",
                            City = "Thu Duc",
                            EmailAddress = "curry@gmail.com",
                            FirstName = "Stephen",
                            LastName = "Curry",
                            Phone = "0923999888",
                            State = "Active",
                            Zip = "71300"
                        },
                        new
                        {
                            AuthorId = 2,
                            Address = "Tan Phu District",
                            City = "HCM",
                            EmailAddress = "beal@gmail.com",
                            FirstName = "Braley",
                            LastName = "Beal",
                            Phone = "0923777888",
                            State = "Active",
                            Zip = "76000"
                        },
                        new
                        {
                            AuthorId = 3,
                            Address = "Tan Binh District",
                            City = "HCM",
                            EmailAddress = "clarkson@gmail.com",
                            FirstName = "Jordan",
                            LastName = "Clarkson",
                            Phone = "0923666777",
                            State = "Active",
                            Zip = "700915"
                        });
                });

            modelBuilder.Entity("eBookStore.Repository.Entity.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"), 1L, 1);

                    b.Property<decimal>("Advance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PublishserId")
                        .HasColumnType("int");

                    b.Property<decimal>("Royalty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YTDSale")
                        .HasColumnType("int");

                    b.HasKey("BookId");

                    b.HasIndex("PublishserId");

                    b.ToTable("Book");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            Advance = 100000m,
                            Note = "Van hoc co dien Viet Nam",
                            Price = 54000m,
                            PublishedDate = new DateTime(2023, 10, 2, 22, 22, 28, 887, DateTimeKind.Local).AddTicks(8361),
                            PublishserId = 1,
                            Royalty = 150000m,
                            Title = "Truyen Kieu",
                            Type = "Van hoc",
                            YTDSale = 50
                        },
                        new
                        {
                            BookId = 2,
                            Advance = 200000m,
                            Note = "Tam ly hoc",
                            Price = 132000m,
                            PublishedDate = new DateTime(2023, 10, 2, 22, 22, 28, 887, DateTimeKind.Local).AddTicks(8363),
                            PublishserId = 2,
                            Royalty = 250000m,
                            Title = "Tam ly hoc ve tien",
                            Type = "Tam ly",
                            YTDSale = 40
                        },
                        new
                        {
                            BookId = 3,
                            Advance = 110000m,
                            Note = "Van hoc co dien",
                            Price = 81000m,
                            PublishedDate = new DateTime(2023, 10, 2, 22, 22, 28, 887, DateTimeKind.Local).AddTicks(8365),
                            PublishserId = 3,
                            Royalty = 140000m,
                            Title = "Cay cam ngot cua toi",
                            Type = "Van hoc",
                            YTDSale = 45
                        },
                        new
                        {
                            BookId = 4,
                            Advance = 130000m,
                            Note = "Van hoc co dien nuoc ngoai",
                            Price = 83000m,
                            PublishedDate = new DateTime(2023, 10, 2, 22, 22, 28, 887, DateTimeKind.Local).AddTicks(8367),
                            PublishserId = 2,
                            Royalty = 180000m,
                            Title = "Nhung Cuoc Phieu Luu Cua Huckleberry Finn",
                            Type = "Van hoc",
                            YTDSale = 60
                        },
                        new
                        {
                            BookId = 5,
                            Advance = 140000m,
                            Note = "Van hoc co dien nuoc ngoai",
                            Price = 98000m,
                            PublishedDate = new DateTime(2023, 10, 2, 22, 22, 28, 887, DateTimeKind.Local).AddTicks(8369),
                            PublishserId = 1,
                            Royalty = 194000m,
                            Title = "Totto-chan Ben Cua So",
                            Type = "Van hoc",
                            YTDSale = 78
                        });
                });

            modelBuilder.Entity("eBookStore.Repository.Entity.BookAuthor", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("AuthorOrder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("RoyaltyPercentage")
                        .HasColumnType("float");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("BookAuthor");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            AuthorId = 1,
                            AuthorOrder = "Curry",
                            RoyaltyPercentage = 30.0
                        },
                        new
                        {
                            BookId = 2,
                            AuthorId = 2,
                            AuthorOrder = "Beal",
                            RoyaltyPercentage = 35.0
                        });
                });

            modelBuilder.Entity("eBookStore.Repository.Entity.Publisher", b =>
                {
                    b.Property<int>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublisherId"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublisherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PublisherId");

                    b.ToTable("Publisher");

                    b.HasData(
                        new
                        {
                            PublisherId = 1,
                            City = "HCM",
                            Country = "Viet Nam",
                            PublisherName = "Nha Nam",
                            State = "Active"
                        },
                        new
                        {
                            PublisherId = 2,
                            City = "Ha Noi",
                            Country = "Viet Nam",
                            PublisherName = "Kinh Dong",
                            State = "Active"
                        },
                        new
                        {
                            PublisherId = 3,
                            City = "HCM",
                            Country = "Viet Nam",
                            PublisherName = "Hai Dang",
                            State = "Active"
                        });
                });

            modelBuilder.Entity("eBookStore.Repository.Entity.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Description = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            Description = "Member"
                        });
                });

            modelBuilder.Entity("eBookStore.Repository.Entity.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("EmailAddres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("RoleId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            EmailAddres = "hieu@gmail.com",
                            FirstName = "Vuong",
                            HireDate = new DateTime(2023, 10, 2, 22, 22, 28, 887, DateTimeKind.Local).AddTicks(8328),
                            LastName = "Hieu",
                            MiddleName = "Huu",
                            Password = "1",
                            PublisherId = 1,
                            RoleId = 2,
                            Source = "FPT"
                        },
                        new
                        {
                            UserId = 2,
                            EmailAddres = "trung@gmail.com",
                            FirstName = "Vuong",
                            HireDate = new DateTime(2023, 10, 2, 22, 22, 28, 887, DateTimeKind.Local).AddTicks(8340),
                            LastName = "Trung",
                            MiddleName = "Huu",
                            Password = "1",
                            PublisherId = 2,
                            RoleId = 2,
                            Source = "FPT"
                        },
                        new
                        {
                            UserId = 3,
                            EmailAddres = "khang@gmail.com",
                            FirstName = "Vuong",
                            HireDate = new DateTime(2023, 10, 2, 22, 22, 28, 887, DateTimeKind.Local).AddTicks(8341),
                            LastName = "Khang",
                            MiddleName = "Huu",
                            Password = "1",
                            PublisherId = 2,
                            RoleId = 2,
                            Source = "FPT"
                        });
                });

            modelBuilder.Entity("eBookStore.Repository.Entity.Book", b =>
                {
                    b.HasOne("eBookStore.Repository.Entity.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublishserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("eBookStore.Repository.Entity.BookAuthor", b =>
                {
                    b.HasOne("eBookStore.Repository.Entity.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eBookStore.Repository.Entity.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("eBookStore.Repository.Entity.User", b =>
                {
                    b.HasOne("eBookStore.Repository.Entity.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eBookStore.Repository.Entity.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
